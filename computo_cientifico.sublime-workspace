{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"unif",
				"uniform_sample"
			],
			[
				"unir",
				"uniform_sample"
			],
			[
				"max",
				"max-eigenvalue"
			],
			[
				"fact",
				"factoization"
			],
			[
				"end",
				"end=\"\\n\\n"
			],
			[
				"lin",
				"linspace"
			],
			[
				"eige",
				"eigenvalues"
			],
			[
				"eigv",
				"eigenvectors"
			],
			[
				"id",
				"idx"
			],
			[
				"qr",
				"qr\tfunction"
			],
			[
				"ei",
				"eigvals\tfunction"
			],
			[
				"Q",
				"Q_k"
			],
			[
				"arr",
				"array\tmodule"
			],
			[
				"iter",
				"iterations"
			],
			[
				"he",
				"hessenberg_form\tfunction"
			],
			[
				"err",
				"errors_b\tparam"
			],
			[
				"cond",
				"condition_B_epsilon"
			],
			[
				"condi",
				"condition_B\tstatement"
			],
			[
				"condition",
				"Condition"
			],
			[
				"errors_S",
				"errors_Scipy_B_epsilon"
			],
			[
				"R_epsilon_",
				"R_epsilon_scipy"
			],
			[
				"tri",
				"triu"
			],
			[
				"sig",
				"sigma_prime"
			],
			[
				"les",
				"least_squares_estimator"
			],
			[
				"leas",
				"least_squares_estimator"
			],
			[
				"col",
				"column_stack\tfunction"
			],
			[
				"tS",
				"tScipy_B"
			],
			[
				"B_e",
				"B_epsilon"
			],
			[
				"tCho",
				"tCholesky_B\tstatement"
			],
			[
				"tC",
				"tCholesky_B_epsilon"
			],
			[
				"t_C",
				"tCholesky_B"
			],
			[
				"eig",
				"eig_max"
			],
			[
				"cho",
				"cholesky_factorization"
			],
			[
				"mea",
				"measure_factorization_time"
			],
			[
				"B",
				"B_epsilon"
			],
			[
				"eigen",
				"eigen_values"
			],
			[
				"ran",
				"random"
			],
			[
				"eign",
				"eigen_values"
			],
			[
				"e",
				"epsilon"
			],
			[
				"if",
				"if\tkeyword"
			],
			[
				"time",
				"time_ls"
			],
			[
				"times",
				"times_scipy"
			],
			[
				"tim",
				"time_ls"
			],
			[
				"plot",
				"plot_times"
			],
			[
				"poly",
				"poly_dict\tstatement"
			],
			[
				"pol",
				"polynomial_fit_dictionary\tparam"
			],
			[
				"plo",
				"plot_multiple_fit"
			],
			[
				"po",
				"polynomial_fit_ls"
			],
			[
				"szie",
				"sizes"
			],
			[
				"con",
				"cond\tfunction"
			],
			[
				"titl",
				"title_scipy"
			],
			[
				"tit",
				"title_scipy"
			],
			[
				"til",
				"title_scipy"
			],
			[
				"com",
				"compare_execution_speed"
			],
			[
				"size",
				"sizes"
			],
			[
				"de",
				"degrees\tstatement"
			],
			[
				"polynomial_",
				"polynomial_ls"
			],
			[
				"times_",
				"times_ls"
			],
			[
				"degree",
				"degree"
			],
			[
				"szi",
				"size"
			],
			[
				"si",
				"sizes_list"
			],
			[
				"deg",
				"degree"
			],
			[
				"y_ra",
				"y_range_scipy"
			],
			[
				"lea",
				"least_squares_estimator_scipy"
			],
			[
				"y",
				"y_range"
			],
			[
				"y_",
				"y_prime"
			],
			[
				"x",
				"x_range"
			],
			[
				"GE",
				"generate_sin_curve_data\tfunction"
			],
			[
				"sampl",
				"sample_size"
			],
			[
				"all",
				"allclose"
			],
			[
				"back",
				"backward_substitution"
			],
			[
				"for",
				"forward_substitution"
			],
			[
				"lu",
				"lup_decomposition"
			],
			[
				"tra",
				"transpose\tfunction"
			],
			[
				"as",
				"astype"
			],
			[
				"idx",
				"idx_max"
			],
			[
				"arg",
				"argmax\tfunction"
			],
			[
				"ba",
				"backward_substitution"
			],
			[
				"mati",
				"matrix_shape"
			],
			[
				"matrix",
				"matrix_shape"
			],
			[
				"up",
				"upper_triangular_matrix"
			],
			[
				"ke",
				"kernel_size"
			],
			[
				"out",
				"out_channels"
			],
			[
				"trai",
				"trainset"
			],
			[
				"train",
				"train_batch"
			],
			[
				"para",
				"parameters"
			],
			[
				"la",
				"labels"
			],
			[
				"lab",
				"labels"
			],
			[
				"image",
				"images"
			],
			[
				"pred",
				"predicted"
			],
			[
				"datae",
				"dataset"
			],
			[
				"tes",
				"testset"
			],
			[
				"tor",
				"torch\tmodule"
			],
			[
				"da",
				"datasets"
			],
			[
				"num",
				"numpy"
			],
			[
				"R",
				"Resize"
			],
			[
				"data",
				"dataset"
			],
			[
				"Pro",
				"Probabilidades"
			],
			[
				"VA",
				"Variables"
			],
			[
				"key",
				"key2"
			],
			[
				"di",
				"divergencia"
			],
			[
				"var",
				"variable"
			],
			[
				"varia",
				"variable"
			],
			[
				"va",
				"variable"
			],
			[
				"V",
				"Value"
			],
			[
				"M",
				"ML_P"
			],
			[
				"cl",
				"calcular_probabilidades_modelo_lineal"
			],
			[
				"vari",
				"variable_1"
			],
			[
				"MP",
				"ML_P"
			],
			[
				"est",
				"estimar_modelo_independiente"
			],
			[
				"pro",
				"probabilidad_conjunta_modelo_lineal"
			],
			[
				"Pr",
				"Probability"
			],
			[
				"Proba",
				"probability"
			],
			[
				"o",
				"observation"
			],
			[
				"varibl",
				"variable"
			],
			[
				"number",
				"number_of_ones"
			],
			[
				"nu",
				"number_of_ones"
			],
			[
				"generar",
				"generar_datos_modelo_lineal"
			],
			[
				"rip",
				"ripserOut"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Lista de Cosas para hacer :\n\n- Wait for shipping things. A couple of weeks.\n- Definir que hacer con la dentista.\n- Avanzar el Prototypo de Juego.\n- Sacar fecha del TOEFL.\n\n- Programar UNet en Pytorch. Salvar mejor modelo. Hacer submit al concurso online.\n- Hacer tarea 3 y $ de computo cientifico.\n",
			"settings":
			{
				"buffer_size": 298,
				"line_ending": "Windows",
				"name": "Lista de Cosas para hacer :"
			}
		},
		{
			"file": "Tarea_3/least_squares.py",
			"settings":
			{
				"buffer_size": 3004,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Tarea_3/factorization.py",
			"settings":
			{
				"buffer_size": 2181,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy import linalg\n\nimport timeit\nimport argparse\nimport functools\n\nimport matplotlib.pyplot as plt\n\nfrom substitution import *\nfrom factorization import *\nfrom least_squares import *\n\n# Parser arguments\nparser = argparse.ArgumentParser(description='Compare Cholesky Factorization')\nparser.add_argument('--max-eigenvalue', '--me',\n                    type=float, default=.2, metavar='N',\n                    help='The maximum eigenvalue to pick (default: 10)')\nparser.add_argument('--print-step', '--ps',\n                    type=int, default=100, metavar='N',\n                    help='Number of steps between stats log (default: 100)')\nparser.add_argument('--generate-eigenvalues', '--ge',type=str,\n                    help='Number of steps between stats log (default: 100)')\nargs = parser.parse_args()\n\n\ndef measure_factorization_time(matrix, method, number=1, **kwargs):\n    # Calculate sum of execution times of \"number\".\n    # Return the mean of the execution time when dividing by \"number\".\n    return timeit.timeit(functools.partial(method, matrix),\n                         number=number, **kwargs) / number\n\n\ndef plot_times(times_cholesky_b, times_cholesky_b_e,\n               times_scipy_b, times_scipy_b_e, parameters):\n    x_range = range(len(times_cholesky_b))\n\n    # Plot times\n    plt.plot(x_range, times_cholesky_b, \".-\", label=\"Own Algorithm B\")\n    plt.plot(x_range, times_cholesky_b_e, \".-\", label=\"Own Algorithm Be\")\n    plt.plot(x_range, times_scipy_b, \".-\", label=\"Scipy Algorithm B\")\n    plt.plot(x_range, times_scipy_b_e, \".-\", label=\"Scipy Algorithm Be\")\n\n    # Construct plot\n    plt.legend(loc='upper right')\n    # plt.xticks(x_range, [str(x) for x in parameters])\n    # plt.yscale('log')\n    plt.savefig('execution-times-N=%d' % len(parameters), bbox_inches='tight')\n    plt.show()\n\n\ndef plot_errors(errors_a, errors_b, parameters):\n    x_range = range(len(errors_a))\n\n    # Plot error\n    plt.plot(x_range, errors_a, \".-\", label=\"Errors A\", alpha=0.7)\n    plt.plot(x_range, errors_b, \".-\", label=\"Errors B\", alpha=0.7)\n\n    # Construct plot\n    plt.legend(loc='upper right')\n    # plt.xticks(x_range, [str(x) for x in parameters])\n    plt.yscale('log')\n    plt.savefig('error-N=%d' % len(parameters), bbox_inches='tight')\n    plt.show()\n\n\ndef plot_condition(condition_b, condition_b_e, parameters):\n    x_range = range(len(condition_b))\n\n    # Plot error\n    plt.plot(x_range, condition_b_e, \".-\", label=\"Condition Be\")\n    plt.plot(x_range, condition_b, \".-\", label=\"Condition B\")\n\n    # Construct plot\n    plt.legend(loc='upper right')\n    # plt.xticks(x_range, [str(x) for x in parameters])\n    # plt.yscale('log')\n    plt.savefig('condition-N=%d' % len(parameters), bbox_inches='tight')\n    plt.show()\n\n\ndef compare_execution_speed(parameters):\n    # Sample of times\n    times_ls = []\n    times_scipy = []\n\n    # Dictionary of polynomial fit\n    polynomial_fit_ls = {}\n    polynomial_fit_scipy = {}\n\n    # Define normal distribution\n    sigma = 0.11\n\n    # Loop trough different polynomial degrees and sample size\n    for (degree, size) in parameters:\n\n        # Generate data on sin curve\n        (X, Y) = generate_sin_curve_data(size, sigma)\n\n        # Measure least squares algorithm time using timeit\n        tLS = measure_least_squares_time(X, Y, degree,\n                                         least_squares_polynomial_fit)\n        times_ls.append(tLS)\n\n        # Get polynomial fit with the least square estimator\n        polynomial_ls = least_squares_polynomial_fit(X, Y, degree)\n\n        # Measure least squares using scipy algorithm\n        tScipy = measure_least_squares_time(X, Y, degree,\n                                            least_squares_polynomial_fit_scipy)\n        times_scipy.append(tScipy)\n\n        # Get polynomial fit with the least square estimator\n        polynomial_scipy = least_squares_polynomial_fit_scipy(X, Y, degree)\n\n        # Save polynomial aproximations\n        polynomial_fit_ls[(degree, size)] = polynomial_ls\n        polynomial_fit_scipy[(degree, size)] = polynomial_scipy\n\n        # Plot both estimations\n        plot_fit(X, Y, polynomial_ls, polynomial_scipy,\n                 degree, size, tLS, tScipy)\n\n    # Multiple degrees in same plot\n    sizes = list(set([x[1] for x in polynomial_fit_ls.keys()]))\n\n    for size in sizes:\n        # Generate data on sin curve\n        (X, Y) = generate_sin_curve_data(size, sigma)\n\n        # Subset of dictionary with same size\n        poly_dict = {x: polynomial_fit_ls[x]\n                     for x in polynomial_fit_ls.keys()\n                     if x[1] == size}\n\n        # Plot multiple\n        plot_multiple_fit(X, Y, poly_dict)\n\n    # Plot execution times\n    plot_times(times_ls, times_scipy, parameters)\n\n\ndef main():\n    # Print format to 3 decimal spaces and fix seed\n    np.set_printoptions(formatter={'float': lambda x: \"{0:0.3f}\".format(x)})\n\n    # Fixed matrix parameters\n    n = 20\n    m = 50\n    matrix_shape = (n, m)\n\n    # Fixed noise distribution parameters\n    sigma = 0.11\n\n    # Generate random matrix\n    A = generate_random_matrix(matrix_shape)\n\n    # Calculate QR factorization of A\n    (Q, _) = linalg.qr(A)\n\n    # Set list of max eigenvalues\n    max_eigen_values = np.arange(1, args.max_eigenvalue)\n\n    # Sample of times list\n    times_Cholesky_B = []\n    times_Cholesky_B_epsilon = []\n    times_Scipy_B = []\n    times_Scipy_B_epsilon = []\n\n    errors_Cholesky_B = []\n    errors_Cholesky_B_epsilon = []\n    errors_Scipy_B = []\n    errors_Scipy_B_epsilon = []\n\n    condition_B = []\n    condition_B_epsilon = []\n\n    for eig_max in max_eigen_values:\n\n        # Generate linear eigenvalues\n\n        # eigen_values = np.linspace(eig_max, 1.0, n)\n\n        # Generate uniform eigenvalues\n        uniform_sample = np.random.uniform(1, eig_max, n)\n        uniform_sample[0] = 1\n        uniform_sample[n - 1] = eig_max\n        eigen_values = sorted(uniform_sample)\n\n        # Add gaussian noise to eigen values\n        size = len(eigen_values)\n        eigen_values_noisy = eigen_values + \\\n            np.random.normal(loc=0.0, scale=sigma, size=size)\n\n        # Generate diferently condition matrices\n        B = Q.T @ np.diag(eigen_values) @ Q\n        B_epsilon = Q.T @ np.diag(eigen_values_noisy) @ Q\n\n        condition_B.append(np.linalg.cond(B))\n        condition_B_epsilon.append(np.linalg.cond(B_epsilon))\n\n        tCholesky_B \\\n            = measure_factorization_time(B, cholesky_factorization)\n        tCholesky_B_epsilon \\\n            = measure_factorization_time(B_epsilon, cholesky_factorization)\n        tScipy_B \\\n            = measure_factorization_time(B, linalg.cholesky)\n        tScipy_B_epsilon \\\n            = measure_factorization_time(B_epsilon, linalg.cholesky)\n\n        times_Cholesky_B.append(tCholesky_B)\n        times_Cholesky_B_epsilon.append(tCholesky_B_epsilon)\n        times_Scipy_B.append(tScipy_B)\n        times_Scipy_B_epsilon.append(tScipy_B_epsilon)\n\n        # Measure error of factorization\n        R = cholesky_factorization(B)\n        errors_Cholesky_B.append(\n            np.linalg.norm(B - R.T @ R))\n        # print(\"Cholesky factorization correct ? : \",\n        #        np.allclose(R.T @ R, B), end=\"\\n\\n\")\n\n        R_epsilon = cholesky_factorization(B_epsilon)\n        errors_Cholesky_B_epsilon.append(\n            np.linalg.norm(B - R_epsilon.T @ R_epsilon))\n\n        R_scipy = linalg.cholesky(B)\n        errors_Scipy_B.append(\n            np.linalg.norm(B - R_scipy.T @ R_scipy))\n        # print(\"Cholesky scipy factorization correct ? : \",\n        #       np.allclose(R_scipy.T @ R_scipy, B), end=\"\\n\\n\")\n\n        R_epsilon_scipy = linalg.cholesky(B_epsilon)\n        errors_Scipy_B_epsilon.append(\n            np.linalg.norm(B - R_epsilon_scipy.T @ R_epsilon_scipy))\n\n        # Every printStep iterations show current time information.\n        if eig_max % args.print_step == 0:\n            print(\"Cond : %.5f\" % np.linalg.cond(B),\n                  \"Cholesky Time B : %.5f\" % tCholesky_B,\n                  \"Scipy Time B : %.5f\" % tScipy_B, sep=', ')\n\n    # Plot errors\n    plot_errors(errors_Cholesky_B,\n                errors_Scipy_B,\n                max_eigen_values)\n\n    plot_errors(errors_Cholesky_B_epsilon,\n                errors_Scipy_B_epsilon,\n                max_eigen_values)\n\n    plot_condition(condition_B,\n                   condition_B_epsilon,\n                   max_eigen_values)\n\n    plot_errors(np.abs(np.array(errors_Cholesky_B) -\n                       np.array(errors_Scipy_B)),\n                np.abs(np.array(errors_Cholesky_B_epsilon) -\n                       np.array(errors_Scipy_B_epsilon)),\n                max_eigen_values)\n\n    # Plot times\n    plot_times(times_Cholesky_B,\n               times_Cholesky_B_epsilon,\n               times_Scipy_B,\n               times_Scipy_B_epsilon,\n               max_eigen_values)\n\n\nif __name__ == \"__main__\":\n    main()\n",
			"file": "Tarea_3/compare.py",
			"file_size": 9094,
			"file_write_time": 132144516720460703,
			"settings":
			{
				"buffer_size": 8948,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Tarea_3/substitution.py",
			"settings":
			{
				"buffer_size": 3194,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"control in",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_1",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_3",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_4"
	],
	"file_history":
	[
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_3/stability.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_4/factorization.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_4/stability.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_4/eigenvalues.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_3/least_squares.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/computo_cientifico.sublime-project",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_1/factorization.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_3/factorization.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_3/substitution.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_1/compare.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_2/least_squares.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_2/factorization.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_2/compare.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_3/execution-times-N=10000.png",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_2/substitution.py",
		"/D/Users/Francisco/Downloads/M_DIAG.txt",
		"/D/Users/Francisco/Downloads/M_BIG.txt",
		"/D/Users/Francisco/Documents/Programming/Métodos Numéricos/Tarea 7/SVD.cpp",
		"/D/Users/Francisco/Documents/Programming/Métodos Numéricos/Examen 3/Problema 1/finiteDiference.cpp",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_1/README.txt",
		"/D/Users/Francisco/Documents/Programming/Métodos Numéricos/Tarea 6/parabola.cpp",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_1/substitution.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_1/solve_system.py",
		"/D/Users/Francisco/Downloads/EsqueletosTareas2-3/Tarea2/GL3_init/main.cpp",
		"/D/Users/Francisco/Downloads/Hello_World/GL3_init/Makefile",
		"/D/Users/Francisco/Downloads/Hello_World/GL3_init-build/main",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_1/compare_5.py",
		"/D/Users/Francisco/Downloads/testRead.py",
		"/D/Users/Francisco/Documents/Programming/AnalisisDeAlgoritmos/Tarea2/busqueda.py",
		"/D/Users/Francisco/Downloads/test.txt",
		"/D/Users/Francisco/Documents/Materias/Computacion/Computo_Cientifico/Tarea_1/output.txt",
		"/D/Users/Francisco/Documents/Materias/Computacion/Machine_Learning/unet-mnist/train.py",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/levels/level_scratch/Level_Demo.tscn",
		"/D/Users/Francisco/Documents/Programming/Métodos Numéricos/Tarea 7/outputA.txt",
		"/D/Users/Francisco/Documents/Materias/Computacion/Machine_Learning/unet-mnist/imshow.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Machine_Learning/unet-mnist/datasets.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Machine_Learning/unet-mnist/network.py",
		"/D/Users/Francisco/Downloads/torchTest.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Machine_Learning/conv-mnist/train.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Machine_Learning/conv-mnist/network.py",
		"/D/Users/Francisco/Documents/Materias/Computacion/Machine_Learning/conv-mnist/imshow.py",
		"/D/Users/Francisco/Downloads/main.c",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/controllers/ai_controller/states/combat/attackobject.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/controllers/user_controller/UserController.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/enemy/Enemy.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/player/Player.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/friend/Friend.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/controllers/ai_controller/states/defend/defendfriend.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/controllers/ai_controller_explosive/Chase_Explosive.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/controllers/ai_controller_explosive/Explode_Explosive.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/controllers/ai_controller_ranged/Aim_Ranged.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/controllers/ai_controller_ranged/Idle_Ranged.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/controllers/ai_controller_ranged/RunFromIT_Ranged.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/controllers/ai_controller_ranged/LookForAngle_Ranged.gd",
		"/D/Users/Francisco/Downloads/description.txt",
		"/D/Users/Francisco/Downloads/hp.txt",
		"/F/data/chocolate/chocolate-doom.cfg",
		"/F/data/chocolate/strife.cfg",
		"/F/data/chocolate/default.cfg",
		"/D/Users/Francisco/Documents/Programming/Propedeutico_Maestria/Modelos_Graficos/modelos_graficos.py",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/resources/tile_sets/outdoor/outdoor.tres",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/interface/menu/Menu.tscn",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/levels/prototype_demo/Interaction.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/resources/tile_sets/outdoor/interaction.tres",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/enemy/RangeQLO/Aim_RangeQLO.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/enemy/RangeQLO/Idle_RangeQLO.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/enemy/RangeQLO/RangeQLO.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/levels/horde_demo/Horde_Demo.tscn",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/levels/prototype_demo/Prototype_Demo.tscn",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/pawn/Pawn.tscn",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/pawn/states/action/throw.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/pawn/Pawn.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/friend/Friend.tscn",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/friend/big_friend/BigFriend.tscn",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/enemy/Enemy.tscn",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/enemy/minion/Minion.tscn",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/characters/player/Player.tscn",
		"/C/Users/fcova/AppData/Local/Temp/scp56635/home/pi/Downloads/kalibrate-rtl/src/circular_buffer.cc",
		"/C/Users/fcova/AppData/Local/Temp/scp53858/home/pi/Downloads/kalibrate-rtl/src/fcch_detector.cc",
		"/C/Users/fcova/AppData/Local/Temp/scp40860/home/pi/Downloads/kalibrate-rtl/src/c0_detect.cc",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/pawn/states/action/attack.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/controllers/ai_controller/states/combat/combat.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/autoload/global_constants.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/default_env.tres",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/debug/StatesStackDiplayer.tscn",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/pawn/pawn_state_machine.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/pawn/states/action/stagger.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/pawn/throw_spawn.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/levels/Prototype_Demo.gd",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/resources/tile_sets/outdoor.tres",
		"/D/Users/Francisco/Documents/Programming/Misc/c_to_assembly/c_to_assembly.cpp",
		"/D/Users/Francisco/Documents/Programming/Misc/c_to_assembly/c_to_assembly.s",
		"/D/Users/Francisco/Documents/Programming/Misc/gsm/kalibrate_output.txt",
		"/D/Users/Francisco/Documents/Paper Work/General/RFC.txt",
		"/D/Users/Francisco/Documents/Programming/Misc/net_stop_audiosrv.txt",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/ActionRPG-Ideas.txt",
		"/D/Users/Francisco/Documents/Programming/Misc/gsm/gsm.py",
		"/D/Users/Francisco/Documents/Programming/Misc/ackerman_function/ackerman.s",
		"/D/Users/Francisco/Documents/Programming/Misc/ackerman.cpp",
		"/F/boot/grub/grub.cfg",
		"/D/Users/Francisco/Documents/GitHub/Action-RPG-Godot/art/tilesets/outdoor.tres",
		"/D/Users/Francisco/Documents/GitHub/Godot-engine-tutorial-demos/2018/03-16-camera-2d-rig/end/characters/player.gd",
		"/D/Users/Francisco/Documents/Materias/Matematicas/Probabilidad I/Proyecto Final/markov-generator.py",
		"/D/Users/Francisco/Documents/Materias/Matematicas/Probabilidad I/Proyecto Final/genetic_algorithm.py",
		"/D/Users/Francisco/Documents/Programming/Learning/testTensorflow.py",
		"/D/Users/Francisco/Documents/Programming/Learning/tensorflowVersion.py",
		"/D/Users/Francisco/Documents/Programming/Learning/Keras/kerasTutorial.py",
		"/D/Users/Francisco/Documents/Programming/Learning/Keras/fashionMNIST.py",
		"/C/Users/fcova/.keras/datasets/spa-eng/spa.txt",
		"/D/Users/Francisco/Documents/GitHub/Godot-engine-tutorial-demos/2018/04-24-finite-state-machine/player/states/motion/motion.gd",
		"/D/Users/Francisco/Documents/Programming/Learning/Keras/fashinMINST.py",
		"/C/Users/fcova/AppData/Local/Packages/CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc/LocalState/rootfs/home/francisco/Documents/keras/kerasTutorial.py",
		"/C/Users/fcova/AppData/Local/Packages/CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc/LocalState/rootfs/home/francisco/Documents/gymO.py",
		"/D/Users/Francisco/Downloads/toro_bandas.R",
		"/D/Users/Francisco/Downloads/GIL.R",
		"/C/Users/fcova/AppData/Local/Packages/CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc/LocalState/rootfs/home/francisco/.kaggle/kaggle.json",
		"/D/Users/Francisco/Documents/GitHub/RipserOnR/Ripser.R",
		"/D/Users/Francisco/Documents/GitHub/RipserOnR/Makefile",
		"/C/Users/fcova/AppData/Local/Temp/RtmpGQYYmT/filebe475d91848",
		"/D/Users/Francisco/Documents/GitHub/RipserOnR/ripser.cpp",
		"/C/Users/fcova/AppData/Local/Temp/Rtmp48403q/file13b05bcf4752",
		"/D/Users/Francisco/Documents/GitHub/RipserOnR/output.txt",
		"/D/Users/Francisco/Documents/GitHub/RipserOnR/README.md"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"<open files>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"_k[idx, :]",
			"[],",
			"abs",
			"),",
			"_epsilon",
			"_B",
			"errors",
			"_epsilon",
			",",
			"np.norm",
			"error_",
			"times",
			"R_scipy",
			"R",
			"times",
			"5",
			")",
			"times",
			" = []",
			"tCholesky_B",
			" = []",
			"t",
			"\\",
			" time ",
			"meas",
			"10",
			"linal",
			")",
			"math",
			"Re",
			"Be",
			"random",
			"normal",
			"deg",
			"np.float",
			"np.longdouble",
			"np.float",
			"float",
			"np.float",
			"))",
			"sized",
			"]",
			"x :  [",
			"]",
			"x :  [",
			"b :  [",
			"b :",
			"B :",
			"b :",
			"\\sav",
			"b_",
			"[",
			" 0.",
			"0.640",
			"]",
			"& 0.000",
			"]",
			"000",
			"[",
			", sep=\"\\n\"",
			"0.",
			"range(1, max_size + 1, calculateStep)",
			"1, max_size + 1)",
			"prin",
			")",
			"[]",
			"[i][j]",
			"}",
			"{",
			"j",
			"matrix.shape",
			"L",
			"x",
			"print(",
			"\")",
			")",
			"shape()",
			"upper",
			"_triangular_matrix",
			"\\",
			"[:,:,8:-8,8:-8]",
			"(",
			")",
			"[:,:,8:-8,8:-8]",
			"nv2d(",
			"nrow = 4",
			"train",
			"transforms",
			")\n",
			"inputs",
			")\n",
			"train",
			"num_flat",
			"input_signal",
			"printf(\"%d \",",
			">>>>",
			"mod",
			"]]",
			"master",
			"distancia",
			"Observed",
			" ] ",
			" 1.0 - ",
			"0 ]",
			" ] ",
			"[ 1 ]",
			"= .",
			"= ",
			"xrange",
			"sprite",
			"collision_shape",
			"new_position_marker",
			"marker",
			" marker",
			"modu",
			"offset",
			"GSM_RATE",
			"modulate",
			"modulate+",
			"owner.get_node(\"WeaponPivot\")",
			"navigation",
			"find_node",
			"font",
			"DynamicFontData",
			"18",
			"ttf",
			"var"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"np.float",
			"np.longdouble"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 298,
						"regions":
						{
						},
						"selection":
						[
							[
								53,
								53
							]
						],
						"settings":
						{
							"auto_name": "Lista de Cosas para hacer :",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Tarea_3/least_squares.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3004,
						"regions":
						{
						},
						"selection":
						[
							[
								1692,
								1692
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1596.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Tarea_3/factorization.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2181,
						"regions":
						{
						},
						"selection":
						[
							[
								1574,
								1574
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 855.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Tarea_3/compare.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8948,
						"regions":
						{
						},
						"selection":
						[
							[
								839,
								839
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Tarea_3/substitution.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3194,
						"regions":
						{
						},
						"selection":
						[
							[
								414,
								414
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 44.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "computo_cientifico.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 50.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
